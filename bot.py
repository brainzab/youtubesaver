import os
import logging
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID
from database import register_user, update_user_activity, increment_download_count, log_download, get_stats
from youtube_downloader import is_valid_youtube_url, get_video_info, download_video
from mega_handler import upload_to_mega, cleanup_expired_files, cleanup_local_files

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.add_job(cleanup_expired_files, 'interval', minutes=10)
scheduler.add_job(cleanup_local_files, 'interval', minutes=30)
scheduler.start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    is_new_user = register_user(
        user.id, 
        user.username, 
        user.first_name
    )
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –≤ –Ω—É–∂–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    
    await update.message.reply_text(welcome_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube\n"
        "2. –í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (480p, 720p, 1080p –∏–ª–∏ MP3)\n"
        "3. –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ª—É—á–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n\n"
        "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
    )
    
    await update.message.reply_text(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_stats()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {stats['total_downloads']}\n"
        f"üì• –ó–∞–≥—Ä—É–∑–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {stats['downloads_today']}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats['active_users_today']}\n\n"
        "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–≥—Ä—É–∑–∫–∞–º:\n"
    )
    
    for i, user in enumerate(stats['top_users']):
        username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        first_name = user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        downloads = user.get('total_downloads', 0)
        
        stats_text += f"{i+1}. {first_name} (@{username}): {downloads} –∑–∞–≥—Ä—É–∑–æ–∫\n"
    
    await update.message.reply_text(stats_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL
async def handle_youtube_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_activity(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π YouTube
    if not is_valid_youtube_url(url):
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ... ‚è≥"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video_info = get_video_info(url)
    
    if not video_info:
        await processing_message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data:
        context.user_data = {}
    
    context.user_data['youtube_url'] = url
    context.user_data['video_title'] = video_info['title']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ
    for res in sorted(video_info['resolutions']):
        keyboard.append([InlineKeyboardButton(f"üìπ {res}p", callback_data=f"res_{res}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –∞—É–¥–∏–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if video_info['has_audio']:
        keyboard.append([InlineKeyboardButton("üéµ MP3 (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ)", callback_data="res_audio")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
    minutes, seconds = divmod(video_info['length'], 60)
    hours, minutes = divmod(minutes, 60)
    
    if hours > 0:
        duration = f"{hours}:{minutes:02d}:{seconds:02d}"
    else:
        duration = f"{minutes:02d}:{seconds:02d}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await processing_message.edit_text(
        f"üìπ <b>{video_info['title']}</b>\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {video_info['author']}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
async def handle_quality_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    quality = query.data.split('_')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É YouTube –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    youtube_url = context.user_data.get('youtube_url')
    
    if not youtube_url:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await query.edit_message_text(
        f"–ó–∞–≥—Ä—É–∂–∞—é {'–∞—É–¥–∏–æ' if quality == 'audio' else f'–≤–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ {quality}p'}... ‚è≥\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ."
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    download_result = download_video(youtube_url, quality)
    
    if not download_result:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ MEGA
    await query.edit_message_text(
        f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! üéâ\n"
        f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {download_result['file_size']:.2f} –ú–ë\n\n"
        f"–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ MEGA... ‚è≥"
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ MEGA
    mega_result = upload_to_mega(download_result['file_path'], download_result['file_name'])
    
    if not mega_result:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ MEGA. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expiration_time = mega_result['expiration_time']
    expiration_formatted = expiration_time.strftime("%d.%m.%Y %H:%M:%S")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    increment_download_count(update.effective_user.id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    log_download(
        update.effective_user.id,
        youtube_url,
        quality,
        download_result['file_size'],
        download_result['format']
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
    await query.edit_message_text(
        f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìπ <b>{context.user_data.get('video_title')}</b>\n"
        f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {'MP3 (–∞—É–¥–∏–æ)' if quality == 'audio' else f'{quality}p'}\n"
        f"üì¶ –†–∞–∑–º–µ—Ä: {download_result['file_size']:.2f} –ú–ë\n\n"
        f"üîó <a href='{mega_result['link']}'>–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</a>\n\n"
        f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {expiration_formatted} (1 —á–∞—Å)",
        parse_mode='HTML',
        disable_web_page_preview=True
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL YouTube
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Entity("url"),
        handle_youtube_url
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    application.add_handler(CallbackQueryHandler(handle_quality_selection, pattern="^res_"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 